package com.xengeance.cvmxtended.client.render;

import java.util.List;

import org.apache.logging.log4j.Level;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.IVertexBuilder;
import com.xengeance.cvmxtended.Config;
import com.xengeance.cvmxtended.Reference;
import com.xengeance.cvmxtended.cvmxtended;
import com.xengeance.cvmxtended.entity.LoaderEntity;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.ActiveRenderInfo;
import net.minecraft.client.renderer.IRenderTypeBuffer;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.vector.Vector3d;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import net.minecraftforge.client.event.RenderBlockOverlayEvent;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;

@EventBusSubscriber(value = Dist.CLIENT)
@OnlyIn (Dist.CLIENT)
public class RenderUtils {

	//Used to cache a reference to the loader last driven by the player.
	//Used by the debug render in order to render bounding boxes in front of the bucket
	public static LoaderEntity loader;
	
	@SubscribeEvent
	public static void onRender(RenderWorldLastEvent event)
	{
		if(!Config.CLIENT.ENABLE_DEBUG_RENDERER.get())
			return;
		//DEBUG Renderer for block locations to be affected by the bucket blade
		//This data is generated by the server and then cached per-entity as needed.
		Entity genericVehicle = Minecraft.getInstance().player.getRidingEntity();
		
		//TODO: Current implementation only renders on last ridden vehicle. Implement separate data structure outside LoaderEntity
		if(genericVehicle != null && genericVehicle instanceof LoaderEntity) {
			loader = (LoaderEntity) genericVehicle;
		}
		if(loader != null) {
			List<BlockPos> cache = loader.getDebugScanCache();
			if (cache == null | cache.isEmpty())
				return;
			
		    IRenderTypeBuffer.Impl buffer = Minecraft.getInstance().getRenderTypeBuffers().getBufferSource();
		    if(buffer == null)
		    	return;
		    ActiveRenderInfo activerenderinfo = Minecraft.getInstance().gameRenderer.getActiveRenderInfo();
		    IVertexBuilder builder = buffer.getBuffer(RenderType.LINES);
		    MatrixStack matrixStack = event.getMatrixStack();
		    
		    matrixStack.push();
			    RenderSystem.enableBlend();
			    RenderSystem.defaultBlendFunc();
			    RenderSystem.disableTexture();
			    RenderSystem.disableDepthTest();
				RenderSystem.lineWidth(10.0f);
				
			    Vector3d v = activerenderinfo.getProjectedView();
		        matrixStack.translate(-v.x, -v.y, -v.z);
			    //iterate through each blockPos in the debugScanBlockCache
			    //This is generally not more than a dozen or so blocks per entity
			    for(BlockPos pos : cache) {
				    AxisAlignedBB aabb = new AxisAlignedBB(pos);
				    WorldRenderer.drawBoundingBox(matrixStack, builder, aabb, 1.0f, 00f, 00f, 1.0f);
			    }
			    
	        matrixStack.pop();
	        buffer.finish(RenderType.LINES);
		    
		}
	}
	
}
